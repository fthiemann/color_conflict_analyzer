# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ColorConflictAnalyzer
                                 A QGIS plugin
 This plugin analyzes whether the symbology used is suitable for people with color vision deficiency.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-07
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Thiemann
        email                : fthieman@uni-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDialog, QVBoxLayout, QHBoxLayout, QListWidget, QListWidgetItem, QPushButton, QTextEdit, QLabel, QSpinBox
from qgis.core import QgsProject, QgsMapLayer
from . import analyzer
from .resources import *
import os.path



class DialogPageInput(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Color Conflict Analyzer")
        self.setMinimumWidth(800)
        self.setMinimumHeight(600)

        # Layer selection
        self.layerList = QListWidget()
        self.layerList.setSelectionMode(self.layerList.NoSelection)
        self.layerList.setAlternatingRowColors(True)

        # Threshold input
        thresholdLbl = QLabel("ΔE-Schwellwert:")
        self.thresholdSpin = QSpinBox()
        self.thresholdSpin.setRange(1, 100)
        self.thresholdSpin.setValue(15)

        # Buttons
        self.btnAnalyze = QPushButton("Analysieren")
        self.btnClose = QPushButton("Schließen")

        # Output area
        self.output = QTextEdit()
        self.output.setReadOnly(True)
        self.output.setPlaceholderText("Ergebnis erscheint hier…")

        # Layout
        topRow = QHBoxLayout()
        topRow.addWidget(QLabel("Wähle Layer für die Analyse:"))
        topRow.addStretch()
        topRow.addWidget(thresholdLbl)
        topRow.addWidget(self.thresholdSpin)

        btnRow = QHBoxLayout()
        btnRow.addStretch()
        btnRow.addWidget(self.btnAnalyze)
        btnRow.addWidget(self.btnClose)

        layout = QVBoxLayout(self)
        layout.addLayout(topRow)
        layout.addWidget(self.layerList, 2)
        layout.addLayout(btnRow)
        layout.addWidget(QLabel("Ausgabe:"))
        layout.addWidget(self.output, 4)

        self.btnAnalyze.clicked.connect(self.run_analysis)
        self.btnClose.clicked.connect(self.accept)

        self.populate_layers()

    def populate_layers(self):
        self.layerList.clear()
        for lid, layer in QgsProject.instance().mapLayers().items():
            if layer.type() == QgsMapLayer.VectorLayer:
                item = QListWidgetItem(f"{layer.name()}  ({layer.type()})")
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Checked)  # standardmäßig ausgewählt
                item.setData(Qt.UserRole, lid)  # Layer-ID speichern
                self.layerList.addItem(item)

    def selected_layer_ids(self):
        ids = []
        for i in range(self.layerList.count()):
            it = self.layerList.item(i)
            if it.checkState() == Qt.Checked:
                ids.append(it.data(Qt.UserRole))
        return ids

# Connects UI to code
    def run_analysis(self):
        ids = self.selected_layer_ids()
        if not ids:
            self.output.setPlainText("Es muss mindestens ein Layer ausgewählt sein.")
            return
        threshold = float(self.thresholdSpin.value())
        self.output.setPlainText("Analysiere… bitte warten…")
        try:
            report = analyzer.calculate_conflicts(ids, conflict_threshold=threshold)
            self.output.setPlainText(report)
        except Exception as e:
            self.output.setPlainText(f"Fehler bei der Analyse:\n{e}")





class ColorConflictAnalyzer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ColorConflictAnalyzer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ColorConflictAnalyzer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ColorConflictAnalyzer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/color_conflict_analyzer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ColorConflictAnalyzer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ColorConflictAnalyzer'),
                action)
            self.iface.removeToolBarIcon(action)

    #main-Methode
    def run(self):
        self.dlg = DialogPageInput(self.iface.mainWindow())
        self.dlg.populate_layers()
        # show the dialog
        self.dlg.show()
        self.dlg.raise_()
        self.dlg.activateWindow()
