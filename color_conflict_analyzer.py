# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ColorConflictAnalyzer
                                 A QGIS plugin
 This plugin analyzes whether the symbology used is suitable for people with color vision deficiency.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-07
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Thiemann
        email                : fthieman@uni-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDialog, QVBoxLayout, QHBoxLayout, QListWidget, QListWidgetItem, QPushButton, QTextEdit, QLabel, QSpinBox, QAbstractItemView
from qgis.core import QgsProject, QgsMapLayer
from . import analyzer
from .resources import *
import os.path
from .warnings import show_graduated_warning



class DialogPageInput(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Color Conflict Analyzer")
        self.setMinimumWidth(800)
        self.setMinimumHeight(600)

        # Layer selection
        self.layerList = QListWidget()
        self.layerList.setSelectionMode(self.layerList.NoSelection)
        self.layerList.setAlternatingRowColors(True)

        # Threshold input
        thresholdLbl = QLabel("ΔE-Threshold:")
        self.thresholdSpin = QSpinBox()
        self.thresholdSpin.setRange(1, 100)
        self.thresholdSpin.setValue(15)
        recolorthresholdLbl = QLabel("Recoloring-Threshold:")
        self.recolorthresholdSpin = QSpinBox()
        self.recolorthresholdSpin.setRange(1, 100)
        self.recolorthresholdSpin.setValue(20)

        # Buttons
        self.botAnalyze = QPushButton("Analyse")
        self.botClose = QPushButton("Close")

        # Output area
        self.output = QTextEdit()
        self.output.setReadOnly(True)
        self.output.setPlaceholderText("Output:")

        # Recoloring part
        self.colorList = QListWidget()
        self.colorList.setSelectionMode(self.colorList.NoSelection)
        self.colorList.setAlternatingRowColors(True)
        self.colorList.setMinimumHeight(180)
        self.botRecolor = QPushButton("Recolor Layers")

        # Help text
        self.helpText = QTextEdit()
        self.helpText.setReadOnly(True)
        self.helpText.setMinimumWidth(250)
        self.helpText.setHtml("""
        <h3>Color Conflict Analyzer</h3>

        <p>
        This tool analyzes the colors of layers in the QGIS project for potential
        conflicts that may occur for people with color vision deficiencies (CVD),
        and provides automated recoloring to improve accessibility.
        </p>

        <h4>Simulated Color Vision Deficiencies</h4>
        <p>
        The tool simulates normal color vision as well as several types of
        color vision deficiencies:
        </p>
        <ul>
        <li><b>Protan (red weakness/blindness)</b> – protanomaly/protanopia in multiple severity levels</li>
        <li><b>Deutan (green weakness/blindness)</b> – deuteranomaly/deuteranopia in multiple severity levels</li>
        <li><b>Tritan (blue weakness/blindness)</b> – tritanomaly/tritanopia in multiple severity levels</li>
        </ul>
        <p>
        For each variant, simulations are run at different severity levels so that
        critical color pairs can be identified across a spectrum of scenarios.
        </p>

        <h4>Workflow</h4>
        <ol>
        <li><b>Select layers:</b> Choose the layers you want to analyze. The plugin
            supports <i>single symbol</i>, <i>categorized</i>, and <i>graduated</i> renderers.</li>
        <li><b>Set ΔE threshold &amp; analyze:</b> The lower the threshold, the stricter
            the conflict detection. Click <i>Analyze</i> to start the simulations and
            color distance calculations.</li>
        <li><b>Review the output:</b> See the section “Output formats” below for details
            on how to interpret the results.</li>
        <li><b>Select categories for recoloring:</b> After analysis, a list of selectable
            entries appears in the format <code>Layer|Label|Renderer</code>. Check the
            categories you want to adjust and click <i>Recolor</i>.</li>
        <li><b>Automatic duplication &amp; recoloring:</b> The plugin will duplicate the
            analyzed layers you selected, apply recolored styles to the duplicates,
            and group them under <i>CVD Recolored</i> in the layer tree. This lets you
            immediately compare the original and recolored versions without manually
            editing symbology.</li>
        </ol>

        <h4>Output Formats</h4>
        <ul>
        <li><b>Individual conflicts:</b> Lists each critically close color pairing,
            including the calculated ΔE value and the simulation scenario
            (e.g. Protan/Deutan/Tritan and severity level). This shows which
            colors are indistinguishable under CVD conditions.</li>
        <li><b>Conflict groups:</b> Groups together colors (across layers/categories)
            that conflict with each other, so you can see larger “problem clusters”
            instead of only isolated pairs.</li>
        <li><b>Conflict overview per color:</b> For each color/category, a summary is
            provided with <i>number of conflicts</i>, <i>average ΔE</i>, <i>min/max</i>,
            and an <i>impact rating</i> (higher for very small ΔE values). This helps
            prioritize which colors to adjust first.</li>
        </ul>

        <h4>Notes</h4>
        <ul>
        <li>The ΔE threshold controls the sensitivity of conflict detection.</li>
        <li>The <i>Recolor</i> button now performs automatic recoloring by generating
            new candidate colors that maximize distance from all kept colors (including
            CVD simulations). Only candidates above the threshold are accepted.</li>
        <li>Duplicated, recolored layers are placed in a dedicated group for easy
            comparison. The original layers remain unchanged.</li>
        <li>Supported renderers: <i>single symbol</i>, <i>categorized</i>, and
            <i>graduated</i>. Other renderer types are ignored.</li>
        </ul>
        """)





        # Layout
        topRow = QHBoxLayout()
        topRow.addWidget(QLabel("Layers to analyze:"))
        topRow.addStretch()
        topRow.addWidget(thresholdLbl)
        topRow.addWidget(self.thresholdSpin)
        topRow.addWidget(recolorthresholdLbl)
        topRow.addWidget(self.recolorthresholdSpin)

        midRow = QHBoxLayout()
        midRow.addStretch()
        midRow.addWidget(self.botAnalyze)
        midRow.addWidget(self.botClose)

        botRow = QHBoxLayout()
        botRow.addStretch()
        botRow.addWidget(self.botRecolor)

        # Left side: Layer list, output, color list
        leftsidelayout = QVBoxLayout()
        leftsidelayout.addLayout(topRow)
        leftsidelayout.addWidget(self.layerList, 2)
        leftsidelayout.addLayout(midRow)
        leftsidelayout.addWidget(QLabel("Output:"))
        leftsidelayout.addWidget(self.output, 4)
        leftsidelayout.addWidget(QLabel("Choose items to recolor:"))
        leftsidelayout.addWidget(self.colorList, 3)
        leftsidelayout.addLayout(botRow)

        # Left side and right side with help text
        mainLayout = QHBoxLayout(self)
        mainLayout.addLayout(leftsidelayout, 3)
        mainLayout.addWidget(self.helpText, 1)

        self.botAnalyze.clicked.connect(self.run_analysis)
        self.botClose.clicked.connect(self.accept)
        self.botRecolor.clicked.connect(self.run_recoloring)

        self.populate_layers()

    #to fill the list of layers
    def populate_layers(self):
        self.layerList.clear()
        for lid, layer in QgsProject.instance().mapLayers().items():
            if layer.type() == QgsMapLayer.VectorLayer:
                item = QListWidgetItem(f"{layer.name()}  ({layer.type()})")
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Checked)  # standardmäßig ausgewählt
                item.setData(Qt.UserRole, lid)  # Layer-ID speichern
                self.layerList.addItem(item)

    #to get the ids of the selected layers
    def selected_layer_ids(self):
        ids = []
        for i in range(self.layerList.count()):
            it = self.layerList.item(i)
            if it.checkState() == Qt.Checked:
                ids.append(it.data(Qt.UserRole))
        return ids
    
    #to fill the list of items to be recolored
    def populate_color_items(self, selected_layer_ids):
        self.colorList.clear()
        all_layers = QgsProject.instance().mapLayers()

        for lid in selected_layer_ids:
            layer = all_layers.get(lid)
            if not layer:
                continue

            renderer_type = getattr(layer.renderer(), "type", lambda: "")()
            name = layer.name()

            if renderer_type == "singleSymbol":
                # ein einziger Eintrag
                display = f"{name}|single Symbol|singleSymbol"
                item = QListWidgetItem(display)
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Unchecked)
                # Metadaten für späteres Neufärben
                item.setData(Qt.UserRole, {
                    "name": name,
                    "layer_id": lid,
                    "renderer": "singleSymbol",
                    "label": "single Symbol"
                })
                self.colorList.addItem(item)

            elif renderer_type == "categorizedSymbol":
                for cat in layer.renderer().categories():
                    label = cat.label()
                    display = f"{name}|{label}|categorizedSymbol"
                    item = QListWidgetItem(display)
                    item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                    item.setCheckState(Qt.Unchecked)
                    item.setData(Qt.UserRole, {
                        "layer_id": lid,
                        "renderer": "categorizedSymbol",
                        "label": label
                    })
                    self.colorList.addItem(item)

            elif renderer_type == "graduatedSymbol":
                for rng in layer.renderer().ranges():
                    label = rng.label()
                    display = f"{name}|{label}|graduatedSymbol"
                    item = QListWidgetItem(display)
                    item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                    item.setCheckState(Qt.Unchecked)
                    item.setData(Qt.UserRole, {
                        "layer_id": lid,
                        "renderer": "graduatedSymbol",
                        "label": label
                    })
                    self.colorList.addItem(item)
    

    def selected_color_items(self):
        result = []
        for i in range(self.colorList.count()):
            it = self.colorList.item(i)
            if it.checkState() == Qt.Checked:
                result.append(it.data(Qt.UserRole))
        return result



# Connects UI to code
    def run_analysis(self):
        ids = self.selected_layer_ids()
        self.last_analyzed_ids = ids    #store analyzed ids to use in recoloring
        if not ids:
            self.output.setPlainText("You must select at least one layer.")
            return
        threshold = float(self.thresholdSpin.value())
        self.output.setPlainText("Analyzing...")
        try:
            report = analyzer.calculate_conflicts(ids, conflict_threshold=threshold)
            self.output.setPlainText(report)
            self.populate_color_items(ids)
        except Exception as e:
            self.output.setPlainText(f"Error calculating conflicts\n{e}")

    
    def run_recoloring(self):
        selections = self.selected_color_items() if hasattr(self, "selected_color_items") else []
        
        if not selections:
            self.output.append("\nNo items selected for recoloring.")
            return
        
        #check for graduated items to display warning
        graduated_items = []
        for item in selections:
            if item.get('renderer') == 'graduatedSymbol':
                graduated_items.append(item)
        
        if graduated_items:
            if not show_graduated_warning(self):
                self.output.append("\nRecoloring cancelled by user")
                return

        try:
            report = analyzer.recolor_layers(selections, recolor_threshold=float(self.recolorthresholdSpin.value()), analyzed_layer_ids = getattr(self, "last_analyzed_ids", []))
            self.output.append("\n" + report)
            
        except Exception as e:
            self.output.append(f"\n❌ Error recoloring {e}")





class ColorConflictAnalyzer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ColorConflictAnalyzer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ColorConflictAnalyzer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ColorConflictAnalyzer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/color_conflict_analyzer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ColorConflictAnalyzer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ColorConflictAnalyzer'),
                action)
            self.iface.removeToolBarIcon(action)

    #main-Methode
    def run(self):
        self.dlg = DialogPageInput(self.iface.mainWindow())
        self.dlg.populate_layers()
        # show the dialog
        self.dlg.show()
        self.dlg.raise_()
        self.dlg.activateWindow()
